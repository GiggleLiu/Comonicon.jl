function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    isdefined(Comonicon, Symbol("#@cast")) && precompile(Tuple{Comonicon.var"#@cast", LineNumberNode, Module, Int})
    isdefined(Comonicon, Symbol("#@main")) && precompile(Tuple{Comonicon.var"#@main", LineNumberNode, Module, Int})
    isdefined(Comonicon, Symbol("#@main")) && precompile(Tuple{Comonicon.var"#@main", LineNumberNode, Module})
    isdefined(Comonicon, Symbol("#hint#4")) && precompile(Tuple{Comonicon.var"#hint#4", Int64})
    isdefined(Comonicon, Symbol("#hint#4")) && precompile(Tuple{Comonicon.var"#hint#4", String})
    isdefined(Comonicon, Symbol("#hint#4")) && precompile(Tuple{Comonicon.var"#hint#4", Symbol})
    precompile(Tuple{typeof(Comonicon.cast), Module, String, LineNumberNode})
    precompile(Tuple{typeof(Comonicon.cast), typeof(identity), String, Array{Comonicon.JLArgument, 1}, Array{Comonicon.JLOption, 1}, Array{Comonicon.JLFlag, 1}})
    precompile(Tuple{typeof(Comonicon.codegen_ast_cast), Module, QuoteNode, Expr})
    precompile(Tuple{typeof(Comonicon.codegen_ast_cast_function), Module, Int, Expr})
    precompile(Tuple{typeof(Comonicon.codegen_entry), Module, QuoteNode, Int})
    precompile(Tuple{typeof(Comonicon.codegen_entry), Module, QuoteNode})
    precompile(Tuple{typeof(Comonicon.codegen_entry_cmd), Module, QuoteNode, Symbol, Expr})
    precompile(Tuple{typeof(Comonicon.codegen_entry_cmd), Module, QuoteNode, Symbol, Nothing})
    precompile(Tuple{typeof(Comonicon.codegen_project_entry), Module, QuoteNode, Int})
    precompile(Tuple{typeof(Comonicon.set_cmd!), Base.Dict{String, Any}, ComoniconTypes.Entry, String})
    precompile(Tuple{typeof(Comonicon.set_cmd!), Base.Dict{String, Any}, ComoniconTypes.LeafCommand, String})
    precompile(Tuple{typeof(Comonicon.set_cmd!), Base.Dict{String, Any}, ComoniconTypes.NodeCommand, String})
    precompile(Tuple{typeof(Comonicon.split_hint), String})
    precompile(Tuple{typeof(Comonicon.split_leaf_command), ExproniconLite.JLFunction})
end
