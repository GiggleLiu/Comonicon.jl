var documenterSearchIndex = {"docs":
[{"location":"project/#project","page":"Create a CLI project","title":"CLI Project","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"To build better, faster and more complicated CLI, you will want to build your CLI in a Julia package and deliver it to your users. I will introduce how to create a Comonicon CLI project in this chapter.","category":"page"},{"location":"project/#Create-a-Julia-Comonicon-project","page":"Create a CLI project","title":"Create a Julia Comonicon project","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"A Comonicon CLI project is first a Julia project, thus you should first create a Julia project. If you don't know what is a Julia project, please read about the Pkg section of creating packages. The minimal requirement of a Julia Comonicon project is the following structure","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"Demo\n├── LICENSE\n├── Manifest.toml\n├── Project.toml\n├── README.md\n├── src\n│   └── Demo.jl\n└── test\n    └── runtests.jl","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"usually it's more convenient to create a Julia project via IonCLI, after you install IonCLI, you can type the following command in your terminal","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"ion create Demo --template=comonicon","category":"page"},{"location":"project/#Use-@cast-to-define-multiple-commands","page":"Create a CLI project","title":"Use @cast to define multiple commands","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"In a large project, one might need to define multiple commands. This can be done via @cast.","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"@cast","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"@cast is similar to @main before functions, but it won't execute anything, but only create the command and register the command to a global variable CASTED_COMMANDS in the current module. And it will create NodeCommands before modules, and the sub-commands of the NodeCommand can be created via @cast inside the module.","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"After you create the commands via @cast, you can declare an entry at the bottom of your module via @main. A simple example looks like the following","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"module Demo\n\nusing Comonicon\n\n@cast mycmd1(arg; option=\"Sam\") = println(\"cmd1: arg=\", arg, \"option=\", option)\n@cast mycmd2(arg; option=\"Sam\") = println(\"cmd2: arg=\", arg, \"option=\", option)\n\n\"\"\"\na module\n\"\"\"\nmodule Cmd3\n\nusing Comonicon\n\n@cast mycmd4(arg) = println(\"cmd4: arg=\", arg)\n\nend # module\n\n@cast Cmd3\n\n\"\"\"\nmy demo Comonicon CLI project.\n\"\"\"\n@main\n\nend # module","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"You can find all created commands via following","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"julia> Demo.CASTED_COMMANDS\nDict{String,Any} with 4 entries:\n  \"mycmd2\" => mycmd2 [options] <arg>\n  \"cmd3\"   => cmd3 <command>\n  \"main\"   => demo v0.1.0\n  \"mycmd1\" => mycmd1 [options] <arg>","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"and you can execute the command via Demo.command_main created by @main:","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"(Image: project-demo)","category":"page"},{"location":"project/#Setup-the-build.jl","page":"Create a CLI project","title":"Setup the build.jl","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"Then you can create a build.jl file in your package deps folder to install this command to ~/.julia/bin when your user install your package. This will only need one line:","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"# build.jl\nusing Demo; Demo.comonicon_install()","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"To learn about how to use it, you can type","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"julia --project deps/build.jl -h","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"which will print the following help message:","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"(Image: build-help)","category":"page"},{"location":"project/#Install-the-CLI","page":"Create a CLI project","title":"Install the CLI","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"You can now install the CLI by building the package either in REPL via ]build or use IonCLI in terminal via","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"ion build # in Demo folder","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"This will install this command to ~/.julia/bin directory by default, if you have put this directory in your PATH then you will be able to use the command demo directory in your terminal, e.g","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"demo -h","category":"page"},{"location":"project/#Enable-System-Image","page":"Create a CLI project","title":"Enable System Image","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"Some CLI projects are quite complicated thus the startup latency is still quite huge even the package module is precompiled. In this case, one will want to use a system image to reduce the startup latency.","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"You can enable to the system image build by specifying [sysimg] field in your Comonicon configuration file Comonicon.toml (or JuliaComonicon.toml).","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"name = \"demo\"\n\n[install]\ncompletion = true\nquiet = false\noptimize = 2\n\n[sysimg]","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"You can also specify more detailed system image compilation options, e.g","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"[sysimg]\nincremental=false\nfilter_stdlibs=true","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"You can find more references for these options in PackageCompiler#create_sysimage.","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"However, you may still find it being slow, you can further reduce the latency by adding an execution file to record precompilation statements.","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"[sysimg.precompile]\nexecution_file = [\"deps/precompile.jl\"]","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"or you can manually specify these precompile statements via","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"[sysimg.precompile]\nstatements_file = [\"deps/statements.jl\"]","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"you can learn more about how to create precompilation statements via SnoopCompile and create a userimg.jl as the precompilation statements.","category":"page"},{"location":"project/#Enable-Application-Build","page":"Create a CLI project","title":"Enable Application Build","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"You can build a standalone application similar to building a system image as well, e.g","category":"page"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"[application]\nincremental=true\nfilter_stdlibs=false\n\n[application.precompile]\nstatements_file = [\"deps/statements.jl\"]","category":"page"},{"location":"project/#Further-Reference","page":"Create a CLI project","title":"Further Reference","text":"","category":"section"},{"location":"project/","page":"Create a CLI project","title":"Create a CLI project","text":"The CLI we just used to create this project serves as the best practice for Comonicon, you can take it as a reference: IonCLI.jl.","category":"page"},{"location":"parse/#Parse","page":"Command Parsing","title":"Parse","text":"","category":"section"},{"location":"parse/","page":"Command Parsing","title":"Command Parsing","text":"This is the frontend @cast and @main of Comonicon.","category":"page"},{"location":"parse/","page":"Command Parsing","title":"Command Parsing","text":"The @main command will use generate a few functions in the module:","category":"page"},{"location":"parse/","page":"Command Parsing","title":"Command Parsing","text":"the entry function for CLI command_main.\ncomonicon_install: for command build and installation.\ncomonicon_install_path: for path build and installation.\njulia_main: for building standalone applications.","category":"page"},{"location":"parse/#References","page":"Command Parsing","title":"References","text":"","category":"section"},{"location":"parse/","page":"Command Parsing","title":"Command Parsing","text":"Modules = [Comonicon.Parse]","category":"page"},{"location":"types/#Command-Types","page":"Command Types","title":"Command Types","text":"","category":"section"},{"location":"types/","page":"Command Types","title":"Command Types","text":"The frontend @main and @cast restrict a lot features to make the package interface as simple as possible. However, if you want to customize the behaviour, you can also create command objects directly via the interfaces at this level, which are all in Comonicon.Types.","category":"page"},{"location":"types/#References","page":"Command Types","title":"References","text":"","category":"section"},{"location":"types/","page":"Command Types","title":"Command Types","text":"Modules = [Comonicon.Types]","category":"page"},{"location":"conventions/#Conventions","page":"Conventions","title":"Conventions","text":"","category":"section"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"leaf command: leaf commands are the commands at the last of the CLI that takes arguments, options and flags, e.g the show command below","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"node command: node commands are the commands at the middle or first of the CLI that contains sub-commands, e.g the remote command below","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"git remote show origin","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"arguments: arguments are command line arguments that required at the leaf command","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"flags: flags are command line options that has no arguments, e.g --flag or -f (short flag).","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"options: options are command line options that has arguments, e.g --name Sam or -n Sam, also --name=Sam or -nSam.","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"When used on function expressions, @cast and @main have the same convention on how they convert your expressions to commands, these are","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"function arguments are parsed as command arguments:\nvalue will be converted automatically if arguments has type annotation\noptional arguments are allowed\nfunction keyword arguments are parsed as command flags or options:\nkeyword arguments must have default value\nkeyword arguments of type Bool can only have false as default value, which will be treated as flags that allow short flags.\nvalue will be converted automatically if keyword arguments has type annotation\nfunction doc string can use section names: Arguments, Options and Flags to annotate your CLI:\nshort options or short flags can be declared via -f, flag or -o, --option <name> (see example below)","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"note: Note\nto be compatible with shell options, variable names with underscore _ will be automatically replaced with dash -.   As a result, the corresponding doc string should use dash - instead of _ as well, e.g kwargs name dash_dash will be converted to --dash-dash option/flag in terminal, and its corresponding doc string should be - `--dash-dash`: <arg>.","category":"page"},{"location":"configurations/#Configurations","page":"Command Configuration","title":"Configurations","text":"","category":"section"},{"location":"configurations/","page":"Command Configuration","title":"Command Configuration","text":"Configurations can be defined via a TOML file, it should be named as either Comonicon.toml or JuliaComonicon.toml under a Julia project project root directory.","category":"page"},{"location":"configurations/#References","page":"Command Configuration","title":"References","text":"","category":"section"},{"location":"configurations/","page":"Command Configuration","title":"Command Configuration","text":"Modules = [Comonicon.Configurations]","category":"page"},{"location":"codegen/#Code-Generation","page":"Code Generation","title":"Code Generation","text":"","category":"section"},{"location":"codegen/","page":"Code Generation","title":"Code Generation","text":"This is the backend of Comonicon. Currently it can only generates a Julia AST.","category":"page"},{"location":"codegen/#References","page":"Code Generation","title":"References","text":"","category":"section"},{"location":"codegen/","page":"Code Generation","title":"Code Generation","text":"Modules = [Comonicon.CodeGen]","category":"page"},{"location":"#Comonicon","page":"Home","title":"Comonicon","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"gith averminaluk ayh juldas mausan urdan","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Roger's magic book for command line interfaces.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Comonicon","category":"page"},{"location":"#Comonicon","page":"Home","title":"Comonicon","text":"All the terminals are under my command. Comonicon is a CLI (Command Line Interface) generator that features light-weight dependency (optional to have zero dependency), fast start-up time and easy to use. See the website for more info.\n\n\n\n\n\n","category":"module"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The simplest and most common way to use Comonicon is to use @cast and @main.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@main","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's use a simple example to show how, the following example creates a command using @main.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Comonicon\n@main function mycmd(arg; option=\"Sam\", flag::Bool=false)\n    @show arg\n    @show option\n    @show flag\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"if you write this into a script file myscript.jl and execute it using","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia myscript.jl -h","category":"page"},{"location":"","page":"Home","title":"Home","text":"You will see the following in your terminal.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: myscript-help)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to add some description to your command, you can just write it as a Julia function doc string, e.g","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Comonicon\n\n\"\"\"\nmy first Comonicon CLI.\n\"\"\"\n@main function mycmd(arg; option=\"Sam\", flag::Bool=false)\n    @show arg\n    @show option\n    @show flag\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: myscript-help-docstring)","category":"page"},{"location":"","page":"Home","title":"Home","text":"but you might also want to have more detailed help message for your CLI arguments and options, you can specify them via doc string:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"\"\"\nmy command line interface.\n\n# Arguments\n\n- `arg`: an argument\n\n# Options\n\n- `-o, --option`: an option that has short option.\n\n# Flags\n\n- `-f, --flag`: a flag that has short flag.\n\"\"\"\n@main function mycmd(arg; option=\"Sam\", flag::Bool=false)\n    @show arg\n    @show option\n    @show flag\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will give a help message looks like below after execute this in myscript.jl via julia myscript.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: mycmd-option-doc)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, you can directly use this script from command line in this way. But if you want to make it accessible in shell, should do the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"create a file without any extension called mycmd\ncopy the script above\nadd the following line on the top of your script mycmd (this is called shebang):","category":"page"},{"location":"","page":"Home","title":"Home","text":"#!<path to your julia executable>","category":"page"},{"location":"","page":"Home","title":"Home","text":"now your mycmd script should look like the following","category":"page"},{"location":"","page":"Home","title":"Home","text":"#!<path to your julia executable>\nusing Comonicon\n\n\"\"\"\nmy first Comonicon CLI.\n\"\"\"\n@main function mycmd(arg; option=\"Sam\", flag::Bool=false)\n    @show arg\n    @show option\n    @show flag\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"now we need to give this file permission via chmod:","category":"page"},{"location":"","page":"Home","title":"Home","text":"chmod +x mycmd","category":"page"},{"location":"","page":"Home","title":"Home","text":"you can now execute this file directly via ./mycmd, if you want to be able to execute  this cmd directly from anywhere in your terminal, you can move this file to .julia/bin  folder, then add .julia/bin to your PATH","category":"page"},{"location":"","page":"Home","title":"Home","text":"export PATH=\"$HOME/.julia/bin:$PATH\"","category":"page"},{"location":"#What's-under-the-hood?","page":"Home","title":"What's under the hood?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Now let me explain what @main does here. In short it does the following things:","category":"page"},{"location":"","page":"Home","title":"Home","text":"parse your expression and create a command line object\nuse this command line object to create an entry (See Conventions section to read about its convention)\ngenerate a Julia script to actually execute the command\ncache the generated Julia script into a file so it won't need to recompile your code again","category":"page"},{"location":"#Developer-Recommendations","page":"Home","title":"Developer Recommendations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For simple and small cases, a CLI script is sufficient.","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, for larger projects and more serious usage, one should create a Comonicon CLI project to use the full power of Comonicon. You will be able to gain the following features for free in a Comonicon project:","category":"page"},{"location":"","page":"Home","title":"Home","text":"much faster startup time\nautomatic CLI installation\nmuch easier to deliver it to more users:\ncan be registered and installed as a Julia package\ndistributable system image build in CI (powered by PackageCompiler)\ndistributable standalone application build in CI (powered by PackageCompiler)","category":"page"},{"location":"build/#Build-and-Install-Tools","page":"Build and Install CLI","title":"Build and Install Tools","text":"","category":"section"},{"location":"build/","page":"Build and Install CLI","title":"Build and Install CLI","text":"You can use various way to build and install your CLI, this includes:","category":"page"},{"location":"build/","page":"Build and Install CLI","title":"Build and Install CLI","text":"use it as a script, and enable or disable compile cache via (Comonicon.disable_cache and Comonicon.enable_cache).\nbuild it as a package and install to ~/.julia/bin:\nuse compile=:min in Comonicon.install if you don't care about the speed\nuse sysimg=true in Comonicon.install if you care about both start up time and the speed","category":"page"},{"location":"build/#Reference","page":"Build and Install CLI","title":"Reference","text":"","category":"section"},{"location":"build/","page":"Build and Install CLI","title":"Build and Install CLI","text":"Modules = [Comonicon.PATH, Comonicon.BuildTools, Comonicon.Tools]","category":"page"}]
}
